#include <stdio.h>
#include <math.h>
#include <iostream>
#include <vector>
#include <GL/glut.h>
using namespace std;

int pntX1, pntY1, choice = 0, edges=4;
//pntX and pntY are vectors used to store polygon points
//lineX and lineY are vectors used to store line points
vector<int> pntX;
vector<int> pntY;
vector<int> lineX;
vector<int> lineY;
int transX, transY;
double scaleX, scaleY;
double angle, angleRad;


double round(double d)
{
	return floor(d + 0.5);
}

void drawPolygon()
{
	glBegin(GL_POLYGON);
	glColor3f(1.0, 0.0, 0.0);
	for (int i = 0; i < edges; i++)
	{
		glVertex2i(pntX[i], pntY[i]);
	}
	glEnd();
}


void drawPolygonTrans(int x, int y)
{
	glBegin(GL_POLYGON);
	glColor3f(0.0, 1.0, 0.0);
	for (int i = 0; i < edges; i++)
	{
		glVertex2i(pntX[i] + x, pntY[i] + y);
	}
	glEnd();
}

void drawPolygonScale(double x, double y)
{
	glBegin(GL_POLYGON);
	glColor3f(0.0, 0.0, 1.0);
	for (int i = 0; i < edges; i++)
	{
		glVertex2i(round(pntX[i] * x), round(pntY[i] * y));
	}
	glEnd();
}

void drawPolygonRotation(double angleRad)
{
	glBegin(GL_POLYGON);
	glColor3f(1.0, 0.0, 1.0);
	for (int i = 0; i < edges; i++)
	{
		glVertex2i(round((pntX[i] * cos(angleRad)) - (pntY[i] * sin(angleRad))), round((pntX[i] * sin(angleRad)) + (pntY[i] * cos(angleRad))));
	}
	glEnd();
}





void drawLine()
{
	glBegin(GL_LINES);
	glColor3f(1.0, 0.0, 0.0);
	glPointSize(1.5);
	for (int i = 0; i < 2; i++)
	{
		glVertex2i(lineX[i], lineY[i]);
	}
	glEnd();
}


void drawLineTrans(int x, int y)
{
	glBegin(GL_LINES);
	glPointSize(1.5);
	glColor3f(0.0, 1.0, 0.0);
	for (int i = 0; i < 2; i++)
	{
		glVertex2i(lineX[i] + x, lineY[i] + y);
	}
	glEnd();
}

void drawLineScale(double x, double y)
{
	glBegin(GL_LINES);
	glPointSize(1.5);
	glColor3f(0.0, 1.0, 1.0);
	for (int i = 0; i < 2; i++)
	{
		glVertex2i(round(lineX[i] * x), round(lineY[i] * y));
	}
	glEnd();
}

void drawLineRotation(double angleRad)
{
	glBegin(GL_LINES);
	glPointSize(1.5);
	glColor3f(1.0, 0.0, 1.0);
	for (int i = 0; i < 2; i++)
	{
		glVertex2i(round((lineX[i] * cos(angleRad)) - (lineY[i] * sin(angleRad))), round((lineX[i] * sin(angleRad)) + (lineY[i] * cos(angleRad))));
	}
	glEnd();
}





void myInit(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
	glColor3f(0.0f, 0.0f, 0.0f);
	glPointSize(4.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(-640.0, 640.0, -480.0, 480.0);
}


void myDisplay(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(0.0, 0.0, 0.0);

	if (choice == 1)
	{
		drawPolygon();
		drawPolygonTrans(transX, transY);
	}
	else if (choice == 2)
	{
		drawPolygon();
		drawPolygonScale(scaleX, scaleY);
	}
	else if (choice == 3)
	{
		drawPolygon();
		drawPolygonRotation(angleRad);
	}
	else if (choice == 4)
	{
		drawLine();
		drawLineTrans(transX, transY);
	}
	else if (choice == 5)
	{
		drawLine();
		drawLineScale(scaleX, scaleY);
	}
	else if (choice == 6)
	{
		drawLine();
		drawLineRotation(angleRad);
	}
	

	glFlush();
}

void main(int argc, char** argv)
{


	
		pntX.push_back(100);
		pntY.push_back(100);
		pntX.push_back(200);
		pntY.push_back(100);
		pntX.push_back(200);
		pntY.push_back(350);
		pntX.push_back(100);
		pntY.push_back(350);


		lineX.push_back(100);
		lineY.push_back(-100);
		lineX.push_back(200);
		lineY.push_back(250);
	

	
		cout << "Enter your choice:\n\n" << endl;

		cout << "1. Polygon Translation" << endl;
		cout << "2. polygon Scaling" << endl;
		cout << "3. polygon Rotation" << endl;
		cout << "4. Line Translation" << endl;
		cout << "5. Line Scaling" << endl;
		cout << "6. Line Rotation" << endl;
		cout << "7. Exit" << endl;

		cin >> choice;

		if (choice == 7) {
			return;
		}




		if (choice == 1 || choice==4)
		{
			cout << "Enter the translation factor for X and Y: "; cin >> transX >> transY;
		}
		else if (choice == 2|| choice==5)
		{
			cout << "Enter the scaling factor for X and Y: "; cin >> scaleX >> scaleY;
		}
		else if (choice == 3|| choice==6)
		{
			cout << "Enter the angle for rotation: "; cin >> angle;
			angleRad = angle * 3.1416 / 180;
		}

		glutInit(&argc, argv);
		glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
		glutInitWindowSize(640, 480);
		glutInitWindowPosition(100, 150);
		glutCreateWindow("Basic Transformations");
		glutDisplayFunc(myDisplay);
		myInit();
		glutMainLoop();
	
	

}

